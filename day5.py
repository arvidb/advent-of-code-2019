'''input
3,225,1,225,6,6,1100,1,238,225,104,0,1102,16,13,225,1001,88,68,224,101,-114,224,224,4,224,1002,223,8,223,1001,224,2,224,1,223,224,223,1101,8,76,224,101,-84,224,224,4,224,102,8,223,223,101,1,224,224,1,224,223,223,1101,63,58,225,1102,14,56,224,101,-784,224,224,4,224,102,8,223,223,101,4,224,224,1,223,224,223,1101,29,46,225,102,60,187,224,101,-2340,224,224,4,224,102,8,223,223,101,3,224,224,1,224,223,223,1102,60,53,225,1101,50,52,225,2,14,218,224,101,-975,224,224,4,224,102,8,223,223,1001,224,3,224,1,223,224,223,1002,213,79,224,101,-2291,224,224,4,224,102,8,223,223,1001,224,2,224,1,223,224,223,1,114,117,224,101,-103,224,224,4,224,1002,223,8,223,101,4,224,224,1,224,223,223,1101,39,47,225,101,71,61,224,101,-134,224,224,4,224,102,8,223,223,101,2,224,224,1,224,223,223,1102,29,13,225,1102,88,75,225,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,1107,677,677,224,102,2,223,223,1006,224,329,1001,223,1,223,108,677,677,224,1002,223,2,223,1005,224,344,101,1,223,223,1008,226,226,224,102,2,223,223,1006,224,359,1001,223,1,223,1107,226,677,224,102,2,223,223,1006,224,374,1001,223,1,223,8,677,226,224,102,2,223,223,1006,224,389,101,1,223,223,8,226,226,224,102,2,223,223,1006,224,404,101,1,223,223,7,677,677,224,1002,223,2,223,1006,224,419,101,1,223,223,7,677,226,224,1002,223,2,223,1005,224,434,101,1,223,223,1108,677,226,224,1002,223,2,223,1006,224,449,1001,223,1,223,108,677,226,224,1002,223,2,223,1006,224,464,101,1,223,223,1108,226,677,224,1002,223,2,223,1006,224,479,101,1,223,223,1007,677,677,224,1002,223,2,223,1006,224,494,1001,223,1,223,107,226,226,224,102,2,223,223,1005,224,509,1001,223,1,223,1008,677,226,224,102,2,223,223,1005,224,524,1001,223,1,223,1007,226,226,224,102,2,223,223,1006,224,539,101,1,223,223,1108,677,677,224,102,2,223,223,1005,224,554,1001,223,1,223,1008,677,677,224,1002,223,2,223,1006,224,569,101,1,223,223,1107,677,226,224,1002,223,2,223,1006,224,584,1001,223,1,223,7,226,677,224,102,2,223,223,1005,224,599,101,1,223,223,108,226,226,224,1002,223,2,223,1005,224,614,101,1,223,223,107,226,677,224,1002,223,2,223,1005,224,629,1001,223,1,223,107,677,677,224,1002,223,2,223,1006,224,644,101,1,223,223,1007,677,226,224,1002,223,2,223,1006,224,659,101,1,223,223,8,226,677,224,102,2,223,223,1005,224,674,1001,223,1,223,4,223,99,226
'''
input_value = '5'
program = input().split(',')
ip = 0

OP_ADD = '01'
OP_MULT = '02'
OP_INPUT = '03'
OP_OUTPUT = '04'
OP_SET_IP_IF_NOT_EQ = '05'
OP_SET_IP_IF_EQ = '06'
OP_TRUE_IF_LESS = '07'
OP_TRUE_IF_EQ = '08'
OP_HALT = '99'

def next():
    global ip
    ip = ip+1
    return ip
 
while ip < len(program):
    op = program[ip]
 
    tmp = list("{:05d}".format(int(op)))
    A,B,C,D,E = tmp
    op = D+E
 
    did_change_ip = False

    if op == OP_ADD or op == OP_MULT:
        op1 = int(program[int(program[next()])]) if C == '0' else int(program[next()])
        op2 = int(program[int(program[next()])]) if B == '0' else int(program[next()])
        out = int(program[next()])

        result = op1 + op2 if op == OP_ADD else op1 * op2
        out_idx = int(out) if A == '0' else program[ip]
        program[out_idx] = str(result)
    
    elif op == OP_INPUT:
        out = int(program[next()])
        out_idx = int(out) if C == '0' else program[ip]
        program[out_idx] = input_value  

    elif op == OP_OUTPUT:
        op1 = int(program[int(program[next()])]) if C == '0' else int(program[next()])
        print('output:',op1)

    elif op == OP_SET_IP_IF_NOT_EQ or op == OP_SET_IP_IF_EQ:
        op1 = int(program[int(program[next()])]) if C == '0' else int(program[next()])
        op2 = int(program[int(program[next()])]) if B == '0' else int(program[next()])
        is_true = op1 != 0 if op == OP_SET_IP_IF_NOT_EQ else op1 == 0
        if is_true:
            ip = op2
            did_change_ip = True

    elif op == OP_TRUE_IF_LESS or op == OP_TRUE_IF_EQ:
        op1 = int(program[int(program[next()])]) if C == '0' else int(program[next()])
        op2 = int(program[int(program[next()])]) if B == '0' else int(program[next()])
        out = int(program[next()]) 
        is_true = (op1 < op2) if op == OP_TRUE_IF_LESS else (op1 == op2)
        result = '1' if is_true else '0'
        out_idx = int(out) if A == '0' else program[ip]
        program[out_idx] = str(result)    
        
    elif op == OP_HALT:        
        break
 
    if not did_change_ip:
        next()
 
#print(program)